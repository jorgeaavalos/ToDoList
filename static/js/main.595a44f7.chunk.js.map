{"version":3,"sources":["logo.svg","ListItems.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ListItems","props","useState","dragging","setDragging","dragItem","useRef","dragNode","list","items","getIndex","value","prop","i","length","handleDragEnd","current","removeEventListener","getDragStyle","params","item","key","listItems","map","className","draggable","style","completed","backgroundColor","onDragStart","e","target","addEventListener","setTimeout","handleDragStart","onDragEnter","currentItem","nodeIndex","dragIndex","temp","handleDragEnter","id","text","onChange","setUpdateItem","icon","onClick","setUncompletedItem","setCompletedItem","deleteItem","duration","easing","library","add","fas","App","state","handleInput","bind","addItem","this","setState","Date","now","preventDefault","newItem","newItems","filterItems","filter","type","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.595a44f7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useState, useRef} from 'react';\r\nimport './App.css';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport FlipMove from 'react-flip-move';\r\nfunction ListItems(props){\r\nconst [dragging,setDragging]= useState(false);\r\nconst dragItem = useRef();\r\nconst dragNode = useRef(); \r\nconst list = props.items;\r\nfunction getIndex(value, list, prop) {\r\n    for(var i = 0; i < list.length; i++) {\r\n        if(list[i][prop] === value) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\n\r\nconst handleDragStart = (e ,params) => {\r\n        dragItem.current = params;\r\n        dragNode.current = e.target;\r\n        dragNode.current.addEventListener('dragend', handleDragEnd)\r\n        setTimeout(()=>{\r\n            setDragging(true)\r\n        },0) \r\n    }\r\n\r\nconst handleDragEnd = () => {\r\n        setDragging(false);\r\n        dragNode.current.removeEventListener('dragend', handleDragEnd);\r\n        dragItem.current=null;\r\n        dragNode.current= null;\r\n    }\r\n\r\nconst handleDragEnter = (e,item) => {\r\n        const currentItem = dragItem.current.item\r\n        if (e.target !== dragNode.current){\r\n            var nodeIndex = getIndex(item.key,list,'key')\r\n            var dragIndex = getIndex(currentItem.key,list,'key')\r\n            let temp = list[nodeIndex];\r\n            list[nodeIndex]=list[dragIndex]\r\n            list[dragIndex]=temp\r\n        }\r\n    }\r\n\r\nconst getDragStyle=(params)=>{\r\n        const currentItem = dragItem.current.item;\r\n        if(currentItem.key===params.item.key){\r\n            return 'drag'\r\n        }\r\n        return ''\r\n    }\r\nconst getCompleteStyle=(params)=>{\r\n        if(params.item.completed){\r\n            return {backgroundColor:'green'}\r\n        }\r\n        return ''\r\n    }\r\n\r\n\r\n    const items = props.items;\r\n    const listItems = items.map(item=>\r\n        {\r\n            return <div className = \"list\" key = {item.key}>\r\n                <p draggable \r\n                style={item.completed?getCompleteStyle({item}):null}\r\n                onDragStart={(e)=>{handleDragStart(e,{item})}}\r\n                onDragEnter = {dragging? (e)=>{handleDragEnter(e,item)}:null}\r\n                id={dragging?getDragStyle({item}):null}\r\n                >\r\n                <input \r\n                    id = {item.key} \r\n                    value={item.text}\r\n                    onChange={(e) =>  \r\n                        {props.setUpdateItem(e.target.value, item.key)}} \r\n                />\r\n                <span>\r\n\r\n                <FontAwesomeIcon className=\"faicons-grabbing\" icon='arrows-alt'\r\n                />\r\n\r\n\r\n                {!item.completed\r\n                ? <FontAwesomeIcon className=\"faicons\" icon='check'\r\n                onClick={() => props.setCompletedItem(item.key)}/>\r\n                : <FontAwesomeIcon className=\"faicons\" icon='reply'\r\n                onClick={() => props.setUncompletedItem(item.key)}\r\n                />}\r\n\r\n\r\n\r\n\r\n                <FontAwesomeIcon className=\"faicons\" icon='trash'\r\n                onClick={() => props.deleteItem(item.key)}\r\n                />\r\n                </span>\r\n                </p>\r\n                \r\n            </div>\r\n\r\n        })\r\n\r\n    return(\r\n        <div>\r\n        <FlipMove duration={300} easing=\"ease-in-out\">\r\n        {listItems}\r\n        </FlipMove>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ListItems;","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport ListItems from './ListItems.js';\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport { fas } from '@fortawesome/free-solid-svg-icons'\r\n\r\n\r\nlibrary.add(fas)\r\n\r\nclass App extends React.Component{\r\nconstructor(props){\r\n  super(props);\r\n  this.state={\r\n    items:[],\r\n    currentItem:{\r\n    text:'',\r\n    key:'',\r\n    completed:false\r\n    }\r\n  }\r\n  this.handleInput = this.handleInput.bind(this);\r\n  this.addItem = this.addItem.bind(this);\r\n  this.deleteItem = this.deleteItem.bind(this);\r\n  this.setUpdateItem = this.setUpdateItem.bind(this);\r\n  this.setCompletedItem=this.setCompletedItem.bind(this);\r\n  this.setUncompletedItem=this.setUncompletedItem.bind(this);\r\n}\r\n\r\nhandleInput(e){\r\n  this.setState({\r\n    currentItem:{\r\n      text: e.target.value,\r\n      key:Date.now(),\r\n      completed:false\r\n    }\r\n  })\r\n}\r\n\r\n\r\naddItem(e){\r\n  e.preventDefault();\r\n  const newItem = this.state.currentItem;\r\n  if(newItem.text!==\"\"){\r\n    const newItems = [...this.state.items, newItem];\r\n    this.setState({\r\n      items:newItems,\r\n      currentItem:{\r\n        text:'',\r\n        key:'',\r\n        completed:''\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\n\r\ndeleteItem(key){\r\n  const filterItems = this.state.items.filter(item => item.key!==key);\r\n    this.setState({\r\n      items:filterItems\r\n    })\r\n  }\r\n\r\n\r\n\r\nsetUpdateItem(text,key){\r\n    const items = this.state.items;\r\n    items.map(item => {\r\n      if(item.key===key){\r\n        item.text=text;\r\n      }\r\n    })\r\n    this.setState({\r\n      items: items\r\n    })\r\n  }\r\n\r\nsetCompletedItem(key){\r\n    const items = this.state.items;\r\n    items.map(item => {\r\n      if(item.key===key){\r\n        item.completed=true;\r\n      }\r\n    })\r\n    this.setState({\r\n      items: items\r\n    })\r\n  }\r\n  setUncompletedItem(key){\r\n    const items = this.state.items;\r\n    items.map(item => {\r\n      if(item.key===key){\r\n        item.completed=false;\r\n      }\r\n    })\r\n    this.setState({\r\n      items: items\r\n    })\r\n  }\r\n\r\n\r\n\r\nrender(){\r\n  return (\r\n    <div>\r\n      <header>\r\n      <form id=\"to-do-form\" className=\"center\">\r\n        <input type=\"text\" placeholder=\"Enter Text\"\r\n        value={this.state.currentItem.text}\r\n        onChange={this.handleInput}/>\r\n        <button type =\"submit\"\r\n        onClick={this.addItem}\r\n        >Add</button>\r\n      </form> \r\n    </header>\r\n\r\n\r\n    <div className=\"list-container\">\r\n    <ListItems items = {this.state.items}\r\n    deleteItem = {this.deleteItem}\r\n    setUpdateItem = {this.setUpdateItem}\r\n    setCompletedItem= {this.setCompletedItem}\r\n    setUncompletedItem={this.setUncompletedItem}></ListItems>\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}