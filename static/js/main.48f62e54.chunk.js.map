{"version":3,"sources":["logo.svg","ListItems.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ListItems","props","useState","dragging","setDragging","dragItem","useRef","dragNode","list","items","getIndex","value","prop","i","length","handleDragEnd","current","removeEventListener","listItems","map","item","className","key","draggable","onDragStart","e","params","target","addEventListener","setTimeout","handleDragStart","onDragEnter","currentItem","nodeIndex","dragIndex","temp","handleDragEnter","id","text","onChange","setUpdateItem","icon","onClick","deleteItem","duration","easing","library","add","faTrash","App","state","handleInput","bind","addItem","this","setState","Date","now","preventDefault","newItem","newItems","filterItems","filter","type","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.48f62e54.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useState, useRef} from 'react';\r\nimport './App.css';\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\r\nimport FlipMove from 'react-flip-move';\r\nfunction ListItems(props){\r\nconst [dragging,setDragging]= useState(false);\r\nconst dragItem = useRef();\r\nconst dragNode = useRef(); \r\nconst list = props.items;\r\n\r\n\r\nfunction getIndex(value, list, prop) {\r\n    for(var i = 0; i < list.length; i++) {\r\n        if(list[i][prop] === value) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\nconst handleDragStart = (e ,params) => {\r\n        dragItem.current = params;\r\n        dragNode.current = e.target;\r\n        dragNode.current.addEventListener('dragend', handleDragEnd)\r\n        setTimeout(()=>{\r\n            setDragging(true)\r\n        },0) \r\n    }\r\n\r\n\r\nconst handleDragEnd = () => {\r\n        setDragging(false);\r\n        dragNode.current.removeEventListener('dragend', handleDragEnd);\r\n        dragItem.current=null;\r\n        dragNode.current= null;\r\n    }\r\n\r\nconst handleDragEnter = (e,item) => {\r\n        const currentItem = dragItem.current.item\r\n        if (e.target !== dragNode.current){\r\n            var nodeIndex = getIndex(item.key,list,'key')\r\n            var dragIndex = getIndex(currentItem.key,list,'key')\r\n            let temp = list[nodeIndex];\r\n            list[nodeIndex]=list[dragIndex]\r\n            list[dragIndex]=temp\r\n        }\r\n    }\r\n\r\nconst getStyles=(params)=>{\r\n        const currentItem = dragItem.current.item;\r\n        if(currentItem.key===params.item.key){\r\n            return 'drag'\r\n        }\r\n        return ''\r\n    }\r\n\r\n\r\n    const items = props.items;\r\n    const listItems = items.map(item=>\r\n        {\r\n            return <div className = \"list\" key = {item.key}>\r\n                <p draggable \r\n                \r\n                onDragStart={(e)=>{handleDragStart(e,{item})}}\r\n                onDragEnter = {dragging? (e)=>{handleDragEnter(e,item)}:null}\r\n                id={dragging?getStyles({item}):null}\r\n                >\r\n                    <input \r\n                    id = {item.key} \r\n                    value={item.text}\r\n                    onChange={\r\n                        (e) =>  {props.setUpdateItem(e.target.value, item.key)}} /> <span>\r\n                <FontAwesomeIcon className='faicons' icon='trash'\r\n                onClick={() => props.deleteItem(item.key)}\r\n                />\r\n                </span>\r\n                </p>\r\n                \r\n               \r\n            </div>\r\n\r\n        })\r\n\r\n    return(\r\n        <div>\r\n        <FlipMove duration={300} easing=\"ease-in-out\">\r\n        {listItems}\r\n        </FlipMove>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ListItems;","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport ListItems from './ListItems.js';\r\nimport { library } from '@fortawesome/fontawesome-svg-core';\r\nimport {faTrash} from '@fortawesome/free-solid-svg-icons';\r\n\r\nlibrary.add(faTrash)\r\n\r\nclass App extends React.Component{\r\nconstructor(props){\r\n  super(props);\r\n  this.state={\r\n    items:[],\r\n    currentItem:{\r\n    text:'',\r\n    key:''\r\n    }\r\n  }\r\n  this.handleInput = this.handleInput.bind(this);\r\n  this.addItem = this.addItem.bind(this);\r\n  this.deleteItem = this.deleteItem.bind(this);\r\n  this.setUpdateItem = this.setUpdateItem.bind(this);\r\n}\r\n\r\nhandleInput(e){\r\n  this.setState({\r\n    currentItem:{\r\n      text: e.target.value,\r\n      key:Date.now() \r\n    }\r\n  })\r\n}\r\n\r\n\r\naddItem(e){\r\n  e.preventDefault();\r\n  const newItem = this.state.currentItem;\r\n  if(newItem.text!==\"\"){\r\n    const newItems = [...this.state.items, newItem];\r\n    this.setState({\r\n      items:newItems,\r\n      currentItem:{\r\n        text:'',\r\n        key:''\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\n\r\ndeleteItem(key){\r\n  const filterItems = this.state.items.filter(item => item.key!==key);\r\n    this.setState({\r\n      items:filterItems\r\n    })\r\n  }\r\n\r\n\r\n\r\nsetUpdateItem(text,key){\r\n    const items = this.state.items;\r\n    items.map(item => {\r\n      if(item.key===key){\r\n        item.text=text;\r\n      }\r\n    })\r\n    this.setState({\r\n      items: items\r\n    })\r\n  }\r\n\r\n\r\n\r\n\r\nrender(){\r\n  return (\r\n    <div>\r\n      <header>\r\n      <form id=\"to-do-form\" className=\"center\">\r\n        <input type=\"text\" placeholder=\"Enter Text\"\r\n        value={this.state.currentItem.text}\r\n        onChange={this.handleInput}/>\r\n        <button type =\"submit\"\r\n        onClick={this.addItem}\r\n        >Add</button>\r\n      </form> \r\n    </header>\r\n\r\n\r\n    <div className=\"list-container\">\r\n    <ListItems items = {this.state.items}\r\n    deleteItem = {this.deleteItem}\r\n    setUpdateItem = {this.setUpdateItem}></ListItems>\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}